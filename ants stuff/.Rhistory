p["q21"]<-samples.eqno32f[which.max(samples.eqno32f$p),]["q21"]
p["q23"]<-samples.eqno32f[which.max(samples.eqno32f$p),]["q23"]
p
fit.eqno32f <- find.mle(lik.eqno32f, p[argnames(lik.eqno32f)]+.01)
p <- starting.point.musse(musstree, 3)
p
p["lambda"]
p["lambda1"]
samples.eqno32f[which.max(samples.eqno32f$p),]["lambda1"]
as.numeric(samples.eqno32f[which.max(samples.eqno32f$p),]["lambda1"])
p["q21"]<-as.numeric(samples.eqno32f[which.max(samples.eqno32f$p),]["q21"])
p["q23"]<-as.numeric(samples.eqno32f[which.max(samples.eqno32f$p),]["q23"])
p["lambda1"]<-as.numeric(samples.eqno32f[which.max(samples.eqno32f$p),]["lambda1"])
p["lambda2"]<-as.numeric(samples.eqno32f[which.max(samples.eqno32f$p),]["lambda2"])
p["lambda3"]<-as.numeric(samples.eqno32f[which.max(samples.eqno32f$p),]["lambda3"])
fit.eqno32f <- find.mle(lik.eqno32f, p[argnames(lik.eqno32f)]+.01)
anova(fit.tf, other=fit.eqno32f)
fit.eqno32f <- find.mle(lik.eqno32f, p[argnames(lik.eqno32f)])
anova(fit.tf, other=fit.eqno32f)
lik.eqno13f <- constrain(lik, q13~0, q31~0, q12~q21, q23~q32, mu1~0, mu2~0, mu3~0)
fit.eqno13f <- find.mle(lik.eqno13f, p[argnames(lik.eqno13f)])
anova(fit.basef, unconstrained=fit.tf, eqno13=fit.eqno13f, irreversible=fit.irrf, no3to2=fit.no32f,  step_wise=fit.no13f, equal_transitions=fit.eqtransf, no32=fit.eqno32f)
library("diversitree", lib.loc="Z:/Programs/R-2.15.2/library")
huge<-read.tree(file="ants_FINAL_CSM_185maxage.trees")
head(huge)
library("diversitree", lib.loc="Z:/Programs/R-2.15.2/library")
q
b1 <- one.boot(states, mean, R=2000, tr=.2)
library("simpleboot", lib.loc="Z:/Programs/R-2.15.2/library")
b1 <- one.boot(states, mean, R=2000, tr=.2)
boot.ci(b1, type=c("perc", "bca"))
b1 <- one.boot(states, mean, R=2000)
boot.ci(b1, type=c("perc", "bca"))
b1 <- one.boot(states, mean, R=2000, tr=.2)
foreach(i=unique(as.character(new.ant.csvnoadelo$Genus))) %do%
d
booted<-NULL
foreach(i=unique(as.character(new.ant.csvnoadelo$Genus))) %do%
{booted[i]<- one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=2000, tr=.2)}
library("foreach", lib.loc="Z:/Programs/R-2.15.2/library")
foreach(i=unique(as.character(new.ant.csvnoadelo$Genus))) %do%
{booted[i]<- one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=2000, tr=.2)}
booted
warnings()
booted
head(booted)
states["acromyrmex"]
one.boot(states, mean, R=2000, tr=.2)
boot.ci(b1, type=c("perc", "bca"))
b1
head(b1)
b1$t0
b1
hey<-boot.ci(b1, type=c("perc", "bca"))
hey
class(hey)
hey*2
fix(hey)
hey<-boot.ci(b1, type=c("perc"))
hey
fix(hey)
hey$perc
hey$perc[4]
foreach(i=unique(as.character(new.ant.csvnoadelo$Genus))) %do%
{booted[i]<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=2000, tr=.2), type=c("perc"))}
i
new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size
new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="pheidole",]$Size
{if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>1) {booted[i]<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=2000, tr=.2), type=c("perc"))}}
booted<-NULL
foreach(i=unique(as.character(new.ant.csvnoadelo$Genus))) %do%
{if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>1) {hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=2000, tr=.2), type=c("perc")); print(hey$perc[5])}}
{if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>1)
{hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=2000, tr=.2), type=c("perc"));
if ((hey$perc[4]<log(100))&(hey$perc[5]>log(100)) {
print(i)
}
}}
{if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>1) {hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=2000, tr=.2), type=c("perc")); if ((hey$perc[4]<log(100))&(hey$perc[5]>log(100)) {print(i)}}}
foreach(i=unique(as.character(new.ant.csvnoadelo$Genus))) %do%
{if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>1)
{hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=2000, tr=.2), type=c("perc"));
if ((hey$perc[4]<log(100))&(hey$perc[5]>log(100)) {
print(i)
}
}}
foreach(i=unique(as.character(new.ant.csvnoadelo$Genus))) %do%
{if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>1) {hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=2000, tr=.2), type=c("perc")); if ((hey$perc[4]<log(100))&(hey$perc[5]>log(100)) {print(i)}}}
foreach(i=unique(as.character(new.ant.csvnoadelo$Genus))) %do%
print(i)
if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>1) {hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=2000, tr=.2), type=c("perc")); if ((hey$perc[4]<log(100))&(hey$perc[5]>log(100)) {print(i)}}
if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>1) {hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=2000, tr=.2), type=c("perc"));}
foreach(i=unique(as.character(new.ant.csvnoadelo$Genus))) %do%
if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>1) {hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=2000, tr=.2), type=c("perc"));}
if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>1) {hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=2000, tr=.2), type=c("perc")); if ((hey$perc[4]<log(100))&(hey$perc[5]>log(100)) {print(i)}}
if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>1) {hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=2000, tr=.2), type=c("perc")); if ((hey$perc[4]<log(100))&(hey$perc[5]>log(100)) }
if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>1) {hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=2000, tr=.2), type=c("perc")); }
if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>1) {hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=2000, tr=.2), type=c("perc"));
if ((hey$perc[4]<log(100))&(hey$perc[5]>log(100))) {print(i)}}
foreach(i=unique(as.character(new.ant.csvnoadelo$Genus))) %do%
if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>1) {hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=2000, tr=.2), type=c("perc"));
if ((hey$perc[4]<log(100))&(hey$perc[5]>log(100))) {print(i)}}
if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>1) {hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=2000, tr=.2), type=c("perc"));
if ((hey$perc[4]<log(100))&(hey$perc[5]>log(100))) {print(NULL)}}
foreach(i=unique(as.character(new.ant.csvnoadelo$Genus))) %do%
if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>1) {hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=2000, tr=.2), type=c("perc"));
if ((hey$perc[4]<log(100))&(hey$perc[5]>log(100))) {print(NULL)}}
if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>1) {hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=2000, tr=.2), type=c("perc"));
if ((hey$perc[4]<log(100))&(hey$perc[5]>log(100))) {print(NULL);}}
if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>1) {hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=2000, tr=.2), type=c("perc"));
if ((hey$perc[4]<log(100))&(hey$perc[5]>log(100))) {print(i);}}
foreach(i=unique(as.character(new.ant.csvnoadelo$Genus))) %do%
if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>1) {hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=2000, tr=.2), type=c("perc"));
if ((hey$perc[4]<log(100))&(hey$perc[5]>log(100))) {print(i);}}
hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="solenopsis",]$Size), mean, R=2000, tr=.2), type=c("perc"));
hey$perc
foreach(i=unique(as.character(new.ant.csvnoadelo$Genus))) %do%
if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>1) {hey<- boot.ci(one.boot(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size, mean, R=2000, tr=.2), type=c("perc"));
if ((hey$perc[4]<(100))&(hey$perc[5]>(100))) {print(i);}}
hey<- boot.ci(one.boot((new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="solenopsis",]$Size), mean, R=2000, tr=.2), type=c("perc"));
hey$perc
plot(density(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="solenopsis",]))
plot(density(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="solenopsis",3]))
(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="solenopsis",])
plot(density(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="solenopsis",3])))
foreach(i=unique(as.character(new.ant.csvnoadelo$Genus))) %do%
if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>1) {hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=2000, tr=.2), type=c("perc"));
if ((hey$perc[4]<log(100))&(hey$perc[5]>log(100))) {print(i);}}
plot(density(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="pheidole",3]))
plot(density(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="pheidole",3])))
hey<- boot.ci(one.boot((new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="pheidole",]$Size), mean, R=2000, tr=.2), type=c("perc"));
abline(v=hey$perc[4])
abline(v=log(hey$perc[4]))
hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="pheidole",]$Size), mean, R=2000, tr=.2), type=c("perc"));
abline(v=log(hey$perc[4]))
abline(v=(hey$perc[4]))
plot(density(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="pheidole",3])))
abline(v=(hey$perc[4]))
abline(v=(hey$perc[5]))
abline(v=mean(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="pheidole",3])))
abline(v=(log(99))
)
abline(v=log(99), col="red")
abline(v=(hey$perc[4]))
foreach(i=unique(as.character(new.ant.csvnoadelo$Genus))) %do%
if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>1) {hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=2000, tr=1), type=c("perc"));
if ((hey$perc[4]<log(100))&(hey$perc[5]>log(100))) {print(i);}}
if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>1) {hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=2000, tr=.2), type=c("perc"));
if ((hey$perc[4]<log(10000))&(hey$perc[5]>log(10000))) {print(i);}}
foreach(i=unique(as.character(new.ant.csvnoadelo$Genus))) %do%
if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>1) {hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=2000, tr=.2), type=c("perc"));
if ((hey$perc[4]<log(10000))&(hey$perc[5]>log(10000))) {print(i);}}
hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="dolichoderus",]$Size), mean, R=2000, tr=.2), type=c("perc"));
hey$perc
plot(density(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="dolichoderus",3])))
(density(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="dolichoderus",3])
)
(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="dolichoderus",3]))
if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>2) {hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=2000, tr=.2), type=c("perc"));
if ((hey$perc[4]<log(10000))&(hey$perc[5]>log(10000))) {print(i);}}
foreach(i=unique(as.character(new.ant.csvnoadelo$Genus))) %do%
if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>2) {hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=2000, tr=.2), type=c("perc"));
if ((hey$perc[4]<log(10000))&(hey$perc[5]>log(10000))) {print(i);}}
foreach(i=unique(as.character(new.ant.csvnoadelo$Genus))) %do%
if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>2) {hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), median, R=2000, tr=.2), type=c("perc"));
if ((hey$perc[4]<log(10000))&(hey$perc[5]>log(10000))) {print(i);}}
if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>2) {hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), median, R=2000), type=c("perc"));
if ((hey$perc[4]<log(10000))&(hey$perc[5]>log(10000))) {print(i);}}
foreach(i=unique(as.character(new.ant.csvnoadelo$Genus))) %do%
if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>2) {hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), median, R=2000), type=c("perc"));
if ((hey$perc[4]<log(10000))&(hey$perc[5]>log(10000))) {print(i);}}
foreach(i=unique(as.character(new.ant.csvnoadelo$Genus))) %do%
if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>2) {hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=20000, tr=.2), type=c("perc"));
if ((hey$perc[4]<log(10000))&(hey$perc[5]>log(10000))) {print(i);}}
foreach(i=unique(as.character(new.ant.csvnoadelo$Genus))) %do%
if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>2) {hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=20000, tr=.2), type=c("perc"));
if (((hey$perc[4]<log(10000))&(hey$perc[5]>log(10000)))OR((hey$perc[4]<log(100))&(hey$perc[5]>log(100)))) {print(i);}}
foreach(i=unique(as.character(new.ant.csvnoadelo$Genus))) %do%
if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>2) {hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=20000, tr=.2), type=c("perc"));
if (((hey$perc[4]<log(10000))&(hey$perc[5]>log(10000)))|((hey$perc[4]<log(100))&(hey$perc[5]>log(100)))) {print(i);}}
foreach(i=unique(as.character(new.ant.csvnoadelo$Genus))) %do%
if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>2) {hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=5000, tr=.2), type=c("perc"));
if (((hey$perc[4]<log(10000))&(hey$perc[5]>log(10000)))|((hey$perc[4]<log(100))&(hey$perc[5]>log(100)))) {print(i);}}
hey2<-NULL
if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>2) {hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=5000, tr=.2), type=c("perc"));
if (((hey$perc[4]<log(10000))&(hey$perc[5]>log(10000)))|((hey$perc[4]<log(100))&(hey$perc[5]>log(100)))) {hey2[length(hey2)+1]=i}}
hey2<-NULL
foreach(i=unique(as.character(new.ant.csvnoadelo$Genus))) %do%
if (length(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size)>2) {hey<- boot.ci(one.boot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus==i,]$Size), mean, R=5000, tr=.2), type=c("perc"));
if (((hey$perc[4]<log(10000))&(hey$perc[5]>log(10000)))|((hey$perc[4]<log(100))&(hey$perc[5]>log(100)))) {hey2[length(hey2)+1]=i}}
hey2
if (names(states)==hey2) print("h")
if (i in names(states)==hey2) print("h")
if (names(states) %in% hey2) print("h")
statesNA<-NULL
for (i in states) print(i)
for (i in states) print(names(states)[i])
for (i in names(states) print(states[i])
for (i in names(states)) print(states[i])
statesNA<-states
for (i in names(states)) {
if (i %in% hey2) {
statesNA[i]<-NA
}
}
statesNA
lik <- make.musse(musstree, statesNA, 3, sampling.f=0.9)
for(i in names(statesNA)) {if(statesNA[i]<log(99)) {newbins[i]=1;} else if(statesNA[i]<log(10^4-100)) {newbins[i]=2} else {newbins[i]=3}}
for(i in names(states)) {if(states[i]<log(99)) {newbins[i]=1;} else if(states[i]<log(10^4-100)) {newbins[i]=2} else {newbins[i]=3}}
for(i in names(states)) {if(states[i]<log(99)) {newbins[i]=1;} else if(states[i]<log(10^4-100)) {newbins[i]=2} else {newbins[i]=3}}
for (i in names(states)) {
if (i %in% hey2) {
newbins[i]<-NA
}
}
newbins
lik <- make.musse(musstree, newbins, 3, sampling.f=0.9)
p <- starting.point.musse(musstree, 3)
lik.basef <- constrain(lik, lambda2 ~ lambda1, lambda3 ~ lambda1, mu2 ~ 0, mu3 ~ 0, mu1~0, q13 ~ q12, q21 ~ q12, q23 ~ q12, q31 ~ q12, q32 ~ q12)
fit.basef <- find.mle(lik.basef, p[argnames(lik.basef)])
lik.tf <- constrain(lik, mu1~0, mu2~0, mu3~0)
fit.tf <- find.mle(lik.tf, p[argnames(lik.tf)])
lik.irrf <- constrain(lik, q32~0, q21~0, q31~0, q13~0, mu1~0, mu2~0, mu3~0)
fit.irrf <- find.mle(lik.irrf, p[argnames(lik.irrf)]+.01)
lik.no13f <- constrain(lik, q13~0, q31~0, mu1~0, mu2~0, mu3~0)
fit.no13f <- find.mle(lik.no13f, p[argnames(lik.no13f)]+.01)
lik.no32f <- constrain(lik, q13~0, q31~0, q32~0, mu1~0, mu2~0, mu3~0)
fit.no32f <- find.mle(lik.no32f, p[argnames(lik.no32f)]+.01)
lik.eqtransf <- constrain(lik, q13~q31, q12~q21, q23~q32, mu1~0, mu2~0, mu3~0)
fit.eqtransf <- find.mle(lik.eqtransf, p[argnames(lik.eqtransf)])
lik.eqno13f <- constrain(lik, q13~0, q31~0, q12~q21, q23~q32, mu1~0, mu2~0, mu3~0)
fit.eqno13f <- find.mle(lik.eqno13f, p[argnames(lik.eqno13f)])
lik.eqno32f <- constrain(lik, q13~0, q12~q21, q32~0, q31~0, mu1~0, mu2~0, mu3~0)
fit.eqno32f <- find.mle(lik.eqno32f, p[argnames(lik.eqno32f)])
anova(fit.basef, unconstrained=fit.tf, eqno13=fit.eqno13f, irreversible=fit.irrf, no3to2=fit.no32f,  step_wise=fit.no13f, equal_transitions=fit.eqtransf, no32=fit.eqno32f)
fit.eqno32f <- find.mle(lik.eqno32f, p[argnames(lik.eqno32f)]+.01)
anova(fit.basef, unconstrained=fit.tf, eqno13=fit.eqno13f, irreversible=fit.irrf, no3to2=fit.no32f,  step_wise=fit.no13f, equal_transitions=fit.eqtransf, no32=fit.eqno32f)
write.csv(anova(fit.basef, unconstrained=fit.tf, eqno13=fit.eqno13f, irreversible=fit.irrf, no3to2=fit.no32f,  step_wise=fit.no13f, equal_transitions=fit.eqtransf, no32=fit.eqno32f), file="anova2.txt")
fit.no32f <- find.mle(lik.no32f, p[argnames(lik.no32f)])
anova(fit.basef, unconstrained=fit.tf, eqno13=fit.eqno13f, irreversible=fit.irrf, no3to2=fit.no32f,  step_wise=fit.no13f, equal_transitions=fit.eqtransf, no32=fit.eqno32f)
fit.no32f <- find.mle(lik.no32f, p[argnames(lik.no32f)]+.01)
fit.no13f <- find.mle(lik.no13f, p[argnames(lik.no13f)])
anova(fit.basef, unconstrained=fit.tf, eqno13=fit.eqno13f, irreversible=fit.irrf, no3to2=fit.no32f,  step_wise=fit.no13f, equal_transitions=fit.eqtransf, no32=fit.eqno32f)
write.csv(anova(fit.basef, unconstrained=fit.tf, eqno13=fit.eqno13f, irreversible=fit.irrf, no3to2=fit.no32f,  step_wise=fit.no13f, equal_transitions=fit.eqtransf, no32=fit.eqno32f), file="anova2.txt")
write.csv(anova(fit.basef, unconstrained=fit.tf, eqno13=fit.eqno13f, irreversible=fit.irrf, no3to2=fit.no32f,  step_wise=fit.no13f, equal_transitions=fit.eqtransf, no32=fit.eqno32f), file="anova2.txt")
fit.no13f <- find.mle(lik.no13f, p[argnames(lik.no13f)]+.01)
anova(fit.basef, unconstrained=fit.tf, eqno13=fit.eqno13f, irreversible=fit.irrf, no3to2=fit.no32f,  step_wise=fit.no13f, equal_transitions=fit.eqtransf, no32=fit.eqno32f)
s2 <- asr.marginal(lik.eqno32f, coef(fit.eqno32f))
avec=bvec=cvec=dvec=NULL;
x=1;
x=1;
avec=bvec=cvec=dvec=NULL;
x=1;
avec=bvec=cvec=dvec=NULL;
x=1;
for(i in newbins) {if(i==1) {avec[length(avec)+1] <- x; x<-x+1} else if(i==2) {bvec[length(bvec)+1] <- x; x<-x+1} else if (i==3) {cvec[length(cvec)+1] <- x; x<-x+1} else {dvec[length(dvec)+1] <- x; x<-x+1}}
{avec[length(avec)+1] <- x; x<-x+1} else if(i==2) {bvec[length(bvec)+1] <- x; x<-x+1} else if (i==3) {cvec[length(cvec)+1] <- x; x<-x+1} else {dvec[length(dvec)+1] <- x; x<-x+1}}
for(i in newbins) {if(as.numeric(i)==1) {avec[length(avec)+1] <- x; x<-x+1} else if(as.numeric(i)==2) {bvec[length(bvec)+1] <- x; x<-x+1} else if (i==3) {cvec[length(cvec)+1] <- x; x<-x+1} else {dvec[length(dvec)+1] <- x; x<-x+1}}
as.numeric(newbins)
(newbins)
for(i in newbins) {if(as.numeric(i)==1) {avec[length(avec)+1] <- x; x<-x+1} else if(as.numeric(i)==2) {bvec[length(bvec)+1] <- x; x<-x+1} else if (i==3) {cvec[length(cvec)+1] <- x; x<-x+1} else {dvec[length(dvec)+1] <- x; x<-x+1}}
newbins[1]==1
newbins[1]==2
newbins["hypoponera"]==2
newbins["hypoponera"]=="NA"
newbins[35]
newbins[35]==1
newbins[35]==2
as.numeric(newbins[35])==1
as.numeric(newbins[35])==NA
as.numeric(newbins[35])=="NA"
as.character(newbins[35])=="NA"
as.character(newbins[35])
as.string(newbins[35])
as.character(da)
as.character("d")
as.string(newbins[35])
as.character(newbins[35])
plot(d, show.node.label=TRUE, cex=.7, edge.width=.5, dir="u", label.offset=20)
tiplabels(pch = 23, cex=d$tip.state/6); tiplabels(pch = 23, cex=d$tip.state[avec]/6, tip=avec, bg=2); tiplabels(pch = 23, cex=d$tip.state[bvec]/6, tip=bvec, bg=3); tiplabels(pch = 23, cex=d$tip.state[cvec]/6, tip=cvec, bg=4)
newbins
newbins[35]
newbins[35]==NA
newbins[35]==1
newbins[34]==1
newbins[!complete.cases(newbins),]
newbins[!complete.cases(newbins)]
!complete.cases(newbins)]
!complete.cases(newbins)
complete.cases(newbins)
if complete.cases(newbins)
if (complete.cases(newbins))
print("h")
complete.cases(newbins)*2
complete.cases(newbins)*0
!complete.cases(newbins)*0
newbins[!complete.cases(newbins)]
newbins[!complete.cases(newbins)]<-0
newbins
avec=bvec=cvec=dvec=NULL;
x=1;
for(i in newbins) {if(i==1) {avec[length(avec)+1] <- x; x<-x+1} else if(i==2) {bvec[length(bvec)+1] <- x; x<-x+1} else if (i==3) {cvec[length(cvec)+1] <- x; x<-x+1} else {dvec[length(dvec)+1] <- x; x<-x+1}}
s2 <- asr.marginal(lik.eqno32f, coef(fit.eqno32f))
plot(d, show.node.label=TRUE, cex=.7, edge.width=.5, dir="u", label.offset=20)
tiplabels(pch = 23, cex=d$tip.state/6); tiplabels(pch = 23, cex=d$tip.state[avec]/6, tip=avec, bg=2); tiplabels(pch = 23, cex=d$tip.state[bvec]/6, tip=bvec, bg=3); tiplabels(pch = 23, cex=d$tip.state[cvec]/6, tip=cvec, bg=4)
nodelabels(thermo=t(s2), piecol=2:5, cex=.5)
s2 <- asr.marginal(lik.basef, coef(fit.basef))
nodelabels(thermo=t(s2), piecol=2:5, cex=.5)
anova(fit.basef, unconstrained=fit.tf, eqno13=fit.eqno13f, irreversible=fit.irrf, no3to2=fit.no32f,  step_wise=fit.no13f, equal_transitions=fit.eqtransf, no32=fit.eqno32f)
write.csv(anova(fit.basef, unconstrained=fit.tf, eqno13=fit.eqno13f, irreversible=fit.irrf, no3to2=fit.no32f,  step_wise=fit.no13f, equal_transitions=fit.eqtransf, no32=fit.eqno32f), file="anova.txt")
library("simpleboot", lib.loc="Z:/Programs/R-2.15.2/library")
help(boot.ci)
plot(density(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="solenopsis",3]))
plot(density(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="formica",3]))
plot(density(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="pheidole",3]))
plot(density(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="labidus",3]))
plot(density(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="pheidole",3]))
plot(density(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="solenopsis",3]))
plot(density(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="solenopsis",3])))
barplot(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="solenopsis",3]))
barplot((new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="solenopsis",3]))
barplot((new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="solenopsis",3]), log=y)
barplot((new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="solenopsis",3]), log="y")
plot(density(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="pheidole",3]))
plot((new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="pheidole",3]))
plot(sort(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="pheidole",3]))
plot(density(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="pheidole",3]), main="Distribution of Colony Sizes in Pheidole")
plot(density(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="pheidole",3]), main="Distribution of Colony Sizes in Pheidole", n=512)
plot(density(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="pheidole",3], n=512), main="Distribution of Colony Sizes in Pheidole")
warnings()
plot(density(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="pheidole",3]), main="Distribution of Colony Sizes in Pheidole", xlab="Colony Size")
plot(density(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="pheidole",3]), main="Distribution of Colony Sizes in Pheidole", xlab="Colony Size", xaxt=TRUE)
plot(density(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="pheidole",3]), main="Distribution of Colony Sizes in Pheidole", xlab="Colony Size", axes="xaxt")
plot(density(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="pheidole",3]), main="Distribution of Colony Sizes in Pheidole", xlab="Colony Size", yaxt="n")
plot(density(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="pheidole",3]), main="Distribution of Colony Sizes in Pheidole", xlab="Colony Size", yaxt="n", tck=1)
plot(density(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="pheidole",3]), main="Distribution of Colony Sizes in Pheidole", xlab="Colony Size", yaxt="n", tck=.1)
plot(density(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="pheidole",3]), main="Distribution of Colony Sizes in Pheidole", xlab="Colony Size", yaxt="n")
plot(density(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="pheidole",3]), main="Distribution of Colony Sizes in Pheidole", xlab="Colony Size")
plot(density(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="pheidole",3]), main="Distribution of Colony Sizes in Pheidole", xlab="Colony Size", col="red")
dens<-density(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="pheidole",3])
plot(dens, main="Distribution of Colony Sizes in Pheidole", xlab="Colony Size", col="red")
plot(dens, main="Distribution of Colony Sizes in Pheidole", xlab="Colony Size")
polygon(d, col="light green")
polygon(d, col="light green", border="blue")
polygon(dens, col="light green")
polygon(dens, col="light green", border="blue")
polygon(dens, col="light green", border="black")
abline(h=0)
plot(dens, main="Distribution of Colony Sizes in Pheidole", xlab="Colony Size", sub="N=37")
plot(dens, main="Distribution of Colony Sizes in Pheidole", sub="N=37", xlab="Colony Size", sub="N=37")
plot(dens, main="Distribution of Colony Sizes in Pheidole", sub="N=37", xlab="Colony Size")
plot(dens, main="Distribution of Colony Sizes in Pheidole", sub="N = 37", xlab="Colony Size")
polygon(dens, col="light green", border="black")
polygon(dens, col="darkseagreen4", border="black")
polygon(dens, col="coral2", border="black")
abline(h=0)
plot(log(dens), main="Distribution of Colony Sizes in Pheidole", sub="N = 37", xlab="Colony Size")
plot(density(log(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="pheidole",3])), main="Distribution of Colony Sizes in Pheidole", xlab="Colony Size", col="red")
sort(new.ant.csvnoadelo[new.ant.csvnoadelo$Genus=="pheidole",3])
library("diversitree", lib.loc="Z:/Programs/R-2.15.2/library")
profiles.plot(samples.eqno32f[2:6], col.line=c("coral2","darkseagreen4","lightgoldenrod2","green", "blue"), las=3,legend="topright", n.br=100, opacity=.6, main="Posterior Probability Distribution")
lik <- make.musse(musstree, newbins, 3, sampling.f=0.9)
for(i in names(medstates)) {if(medstates[i]<log(99)) {newbins[i]=1;} else if(medstates[i]<log(10^4-100)) {newbins[i]=2} else {newbins[i]=3}}
p[1:12]<-runif(12,min=0,max=.8)
lik.basef <- constrain(lik, lambda2 ~ lambda1, lambda3 ~ lambda1, mu2 ~ 0, mu3 ~ 0, mu1~0, q13 ~ q12, q21 ~ q12, q23 ~ q12, q31 ~ q12, q32 ~ q12)
fit.basef <- find.mle(lik.basef, p[argnames(lik.basef)])
lik.tf <- constrain(lik, mu1~0, mu2~0, mu3~0)
fit.tf <- find.mle(lik.tf, p[argnames(lik.tf)])
lik.irrf <- constrain(lik, q32~0, q21~0, q31~0, q13~0, mu1~0, mu2~0, mu3~0)
fit.irrf <- find.mle(lik.irrf, p[argnames(lik.irrf)]+.01)
lik.no13f <- constrain(lik, q13~0, q31~0, mu1~0, mu2~0, mu3~0)
fit.no13f <- find.mle(lik.no13f, p[argnames(lik.no13f)]+.01)
lik.no32f <- constrain(lik, q13~0, q31~0, q32~0, mu1~0, mu2~0, mu3~0)
fit.no32f <- find.mle(lik.no32f, p[argnames(lik.no32f)]+.01)
lik.eqtransf <- constrain(lik, q13~q31, q12~q21, q23~q32, mu1~0, mu2~0, mu3~0)
fit.eqtransf <- find.mle(lik.eqtransf, p[argnames(lik.eqtransf)])
lik.eqno13f <- constrain(lik, q13~0, q31~0, q12~q21, q23~q32, mu1~0, mu2~0, mu3~0)
lik <- make.musse(musstree, newbins, 3, sampling.f=0.9)
p <- starting.point.musse(musstree, 3)
p[1:12]<-runif(12,min=0,max=.8)
lik.basef <- constrain(lik, lambda2 ~ lambda1, lambda3 ~ lambda1, mu2 ~ 0, mu3 ~ 0, mu1~0, q13 ~ q12, q21 ~ q12, q23 ~ q12, q31 ~ q12, q32 ~ q12)
fit.basef <- find.mle(lik.basef, p[argnames(lik.basef)])
lik.tf <- constrain(lik, mu1~0, mu2~0, mu3~0)
fit.tf <- find.mle(lik.tf, p[argnames(lik.tf)])
p[1:12]<-runif(12,min=0,max=.08)
lik.basef <- constrain(lik, lambda2 ~ lambda1, lambda3 ~ lambda1, mu2 ~ 0, mu3 ~ 0, mu1~0, q13 ~ q12, q21 ~ q12, q23 ~ q12, q31 ~ q12, q32 ~ q12)
fit.basef <- find.mle(lik.basef, p[argnames(lik.basef)])
lik.tf <- constrain(lik, mu1~0, mu2~0, mu3~0)
fit.tf <- find.mle(lik.tf, p[argnames(lik.tf)])
lik.irrf <- constrain(lik, q32~0, q21~0, q31~0, q13~0, mu1~0, mu2~0, mu3~0)
fit.irrf <- find.mle(lik.irrf, p[argnames(lik.irrf)]+.01)
lik.no13f <- constrain(lik, q13~0, q31~0, mu1~0, mu2~0, mu3~0)
fit.no13f <- find.mle(lik.no13f, p[argnames(lik.no13f)]+.01)
lik.no32f <- constrain(lik, q13~0, q31~0, q32~0, mu1~0, mu2~0, mu3~0)
fit.no32f <- find.mle(lik.no32f, p[argnames(lik.no32f)]+.01)
lik.eqtransf <- constrain(lik, q13~q31, q12~q21, q23~q32, mu1~0, mu2~0, mu3~0)
fit.eqtransf <- find.mle(lik.eqtransf, p[argnames(lik.eqtransf)])
lik.eqno13f <- constrain(lik, q13~0, q31~0, q12~q21, q23~q32, mu1~0, mu2~0, mu3~0)
fit.eqno13f <- find.mle(lik.eqno13f, p[argnames(lik.eqno13f)])
lik.eqno32f <- constrain(lik, q13~0, q12~q21, q32~0, q31~0, mu1~0, mu2~0, mu3~0)
fit.eqno32f <- find.mle(lik.eqno32f, p[argnames(lik.eqno32f)]+.01)
anova(fit.basef, unconstrained=fit.tf, eqno13=fit.eqno13f, irreversible=fit.irrf, no3to2=fit.no32f,  step_wise=fit.no13f, equal_transitions=fit.eqtransf, no32=fit.eqno32f)
write.csv(anova(fit.basef, unconstrained=fit.tf, eqno13=fit.eqno13f, irreversible=fit.irrf, no3to2=fit.no32f,  step_wise=fit.no13f, equal_transitions=fit.eqtransf, no32=fit.eqno32f), file="anova3.txt")
profiles.plot(samples.no13f[2:6], col.line=c("coral2","darkseagreen4","lightgoldenrod2","green", "blue"), las=3,legend="topright", n.br=100, opacity=.6, main="Posterior Probability Distribution")
woo2k<-mcmc(lik.eqno32f, p, nstep=500, w=1, prior=make.prior.uniform(0,.15,log=FALSE), print.every=50)
wook<-mcmc(lik.eqno32f, p[argnames(lik.eqno32f)], nstep=500, w=1, prior=make.prior.exponential(1 / (2 * (p[1] - p[4]))), print.every=50)
profiles.plot(samples.wook2[2:6], col.line=c("coral2","darkseagreen4","lightgoldenrod2","green", "blue"), las=3,legend="topright", n.br=100, opacity=.6, main="Posterior Probability Distribution")
profiles.plot(samples.wook[2:6], col.line=c("coral2","darkseagreen4","lightgoldenrod2","green", "blue"), las=3,legend="topright", n.br=100, opacity=.6, main="Posterior Probability Distribution")
profiles.plot(wook[2:6], col.line=c("coral2","darkseagreen4","lightgoldenrod2","green", "blue"), las=3,legend="topright", n.br=100, opacity=.6, main="Posterior Probability Distribution")
profiles.plot(samples.eqno32f[2:6], col.line=c("coral2","darkseagreen4","lightgoldenrod2","green", "blue"), las=3,legend="topright", n.br=100, opacity=.6, main="Posterior Probability Distribution", xlim=0.05)
profiles.plot(samples.eqno32f[2:6], col.line=c("coral2","darkseagreen4","lightgoldenrod2","green", "blue"), las=3,legend="topright", n.br=100, opacity=.6, main="Posterior Probability Distribution", xlim=c(0,0.05)
)
profiles.plot(wook[2:6], col.line=c("coral2","darkseagreen4","lightgoldenrod2","green", "blue"), las=3,legend="topright", n.br=100, opacity=.6, main="Posterior Probability Distribution",  xlim=c(0,0.05))
abline(v=(samples.eqno32f[which.max(samples.eqno32f$p),]))
abline(v=(wook[which.max(wook$p),]))
p
head(samples)
head(samples.eqno32f)
head(wook)
profiles.plot(wook[7], col.line=c("coral2","darkseagreen4","lightgoldenrod2","green", "blue"), las=3,legend="topright", n.br=100, opacity=.6, main="Posterior Probability Distribution",  xlim=c(0,0.05))
profiles.plot(wook[7], col.line=c("coral2","darkseagreen4","lightgoldenrod2","green", "blue"), las=3,legend="topright", n.br=100, opacity=.6, main="Posterior Probability Distribution")
profiles.plot(samples.no32f[7], col.line=c("coral2","darkseagreen4","lightgoldenrod2","green", "blue"), las=3,legend="topright", n.br=100, opacity=.6, main="Posterior Probability Distribution")
profiles.plot(samples.eqno32f[7], col.line=c("coral2","darkseagreen4","lightgoldenrod2","green", "blue"), las=3,legend="topright", n.br=100, opacity=.6, main="Posterior Probability Distribution")
profiles.plot(wook2[7], col.line=c("coral2","darkseagreen4","lightgoldenrod2","green", "blue"), las=3,legend="topright", n.br=100, opacity=.6, main="Posterior Probability Distribution")
woo2k
profiles.plot(woo2k[7], col.line=c("coral2","darkseagreen4","lightgoldenrod2","green", "blue"), las=3,legend="topright", n.br=100, opacity=.6, main="Posterior Probability Distribution")
length(woo2k)
profiles.plot(woo2k[2:6], col.line=c("coral2","darkseagreen4","lightgoldenrod2","green", "blue"), las=3,legend="topright", n.br=100, opacity=.6, main="Posterior Probability Distribution")
profiles.plot(wook[7], col.line=c("coral2","darkseagreen4","lightgoldenrod2","green", "blue"), las=3,legend="topright", n.br=100, opacity=.6, main="Posterior Probability Distribution",  xlim=c(0,0.05))
profiles.plot(woo2k[2:6], col.line=c("coral2","darkseagreen4","lightgoldenrod2","green", "blue"), las=3,legend="topright", n.br=100, opacity=.6, main="Posterior Probability Distribution",  xlim=c(0,0.05))
profiles.plot(wook[2:6], col.line=c("coral2","darkseagreen4","lightgoldenrod2","green", "blue"), las=3,legend="topright", n.br=100, opacity=.6, main="Posterior Probability Distribution",  xlim=c(0,0.05))
samples.eqno32f
write.csv(samples.eqno32f, file="sample.txt")
con<-file('ants_FINAL_CSM_185maxage.trees')
open(con)
read.table(con,skip=10,nrow=1) #6-th line
read.table(con,skip=1000,nrow=1) #6-th line
length(con)
library("diversitree", lib.loc="Z:/Programs/R-2.15.2/library")
lik <- make.musse(musstree, newbins, 3, sampling.f=0.9)
p <- starting.point.musse(musstree, 3)
p[1:12]<-runif(12,min=0,max=.15)
samples.tf2<-mcmc(lik.tf, p[argnames(lik.tf)], nstep=1000, w=1, prior=make.prior.uniform(0,.15,log=FALSE), print.every=50)
p[1:12]<-runif(12,min=0,max=.15)
samples.tf3<-mcmc(lik.tf, p[argnames(lik.tf)], nstep=1000, w=1, prior=make.prior.uniform(0,.15,log=FALSE), print.every=50)
p <- starting.point.musse(musstree, 3)
samples.tf4<-mcmc(lik.tf, coef(fit.tf), nstep=1000, w=1, prior=make.prior.exponential(1 / (2 * (p[1] - p[4]))), print.every=50)
divide=400;
logdivide<-log(divide);
binarystates<-NULL;
seriallist<-NULL;
count=1;
nam=hurgh=fit=NULL;
for(u in 1:length(states)) {
logdivide<-sort(states)[u];
for(i in unique(new.ant.csvnoadelo$Genus)) {
if(as.numeric(states[i]) <= logdivide) {binarystates[i]<-0;} else {binarystates[i]<-1;}
}
nam<-paste("lik",u, sep=".")
hurgh<-make.bisse(musstree, binarystates, sampling.f=0.8956);
assign(nam,hurgh)
nam<-paste("fit",u, sep=".")
hurgh<-find.mle(hurgh,p)
assign(nam,hurgh)
}
for(i in 1:length(states)) {
nam<-paste("fit",i, sep=".")
#nam<-paste(nam,"par", sep="$")
barplot(get(nam)$par)
print(nam)
}
lik.tf <- constrain(lik, mu1~0, mu2~0, mu3~0)
fit.tf <- find.mle(lik.tf, p[argnames(lik.tf)])
source('Z:/Documents/ants stuff/likelihooder.R', echo=TRUE)
p <- starting.point.musse(musstree, 3)
lik.tf <- constrain(lik, mu1~0, mu2~0, mu3~0)
fit.tf <- find.mle(lik.tf, p[argnames(lik.tf)])
p[1:12]<-runif(12,min=0,max=.15)
samples.tf2<-mcmc(lik.tf, p[argnames(lik.tf)], nstep=1000, w=1, prior=make.prior.uniform(0,.15,log=FALSE), print.every=50)
p[1:12]<-runif(12,min=0,max=.15)
samples.tf3<-mcmc(lik.tf, p[argnames(lik.tf)], nstep=1000, w=1, prior=make.prior.uniform(0,.15,log=FALSE), print.every=50)
profiles.plot(samples.tf2[2:6], col.line=c("coral2","darkseagreen4","lightgoldenrod2","green", "blue"), las=3,legend="topright", n.br=100, opacity=.6, main="Posterior Probability Distribution")
profiles.plot(samples.tf2[2:6], col.line=c("coral2","darkseagreen4","lightgoldenrod2","green", "blue"), las=3,legend="topright", n.br=100, opacity=.6, main="Posterior Probability Distribution")
profiles.plot(samples.tf2[2:4], col.line=c("coral2","darkseagreen4","lightgoldenrod2","green", "blue"), las=3,legend="topright", n.br=100, opacity=.6, main="Posterior Probability Distribution")
profiles.plot(samples.tf2[2:4,100:1000], col.line=c("coral2","darkseagreen4","lightgoldenrod2","green", "blue"), las=3,legend="topright", n.br=100, opacity=.6, main="Posterior Probability Distribution")
profiles.plot(samples.tf2[5:8.], col.line=c("coral2","darkseagreen4","lightgoldenrod2","green", "blue"), las=3,legend="topright", n.br=100, opacity=.6, main="Posterior Probability Distribution")
raw_est<-samples.tf2[which.max(samples.tf2$p),]
raw_est
abline(v=samples.eqno32f[which.max(samples.eqno32f$p),]
)
abline(v=samples.eqno32f[which.max(samples.eqno32f$p),4:9]
)
abline(v=samples.eqno32f[which.max(samples.eqno32f$p),][4:9]
)
raw_est
raw_est[4:9]
raw_est[5:1]
raw_est[5:11]
raw_est[5:10]
profiles.plot(samples.tf2[2:6], col.line=c("coral2","darkseagreen4","lightgoldenrod2","green", "blue"), las=3,legend="topright", n.br=100, opacity=.6, main="Posterior Probability Distribution")
raw_est[5:10]
abline(v=raw_est[2:6]
)
profiles.plot(samples.tf2[2:4], col.line=c("coral2","darkseagreen4","lightgoldenrod2","green", "blue"), las=3,legend="topright", n.br=100, opacity=.6, main="Posterior Probability Distribution")
abline(v=raw_est[2:4], col.line=c("coral2","darkseagreen4","lightgoldenrod2","green", "blue")
)
profiles.plot(samples.tf2[5:8], col.line=c("coral2","darkseagreen4","lightgoldenrod2","green", "blue"), las=3,legend="topright", n.br=100, opacity=.6, main="Posterior Probability Distribution")
abline(v=raw_est[5:8], col.line=c("coral2","darkseagreen4","lightgoldenrod2","green", "blue")
)
p <- starting.point.musse(musstree, 3)
p <- starting.point.musse(musstree, 3)
samples.tf4<-mcmc(lik.tf, coef(fit.tf), nstep=1000, w=1, prior=make.prior.exponential(1 / (2 * (p[1] - p[4]))), print.every=50)
